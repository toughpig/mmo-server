// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto_define/rpc_service.proto

package proto_define

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RPCService_Call_FullMethodName       = "/proto_define.RPCService/Call"
	RPCService_StreamCall_FullMethodName = "/proto_define.RPCService/StreamCall"
)

// RPCServiceClient is the client API for RPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Generic RPC service for handling dynamic method calls
type RPCServiceClient interface {
	// Generic method for handling any RPC call
	Call(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	// Stream for bidirectional communication
	StreamCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RPCRequest, RPCResponse], error)
}

type rPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCServiceClient(cc grpc.ClientConnInterface) RPCServiceClient {
	return &rPCServiceClient{cc}
}

func (c *rPCServiceClient) Call(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RPCResponse)
	err := c.cc.Invoke(ctx, RPCService_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) StreamCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RPCRequest, RPCResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RPCService_ServiceDesc.Streams[0], RPCService_StreamCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RPCRequest, RPCResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RPCService_StreamCallClient = grpc.BidiStreamingClient[RPCRequest, RPCResponse]

// RPCServiceServer is the server API for RPCService service.
// All implementations must embed UnimplementedRPCServiceServer
// for forward compatibility.
//
// Generic RPC service for handling dynamic method calls
type RPCServiceServer interface {
	// Generic method for handling any RPC call
	Call(context.Context, *RPCRequest) (*RPCResponse, error)
	// Stream for bidirectional communication
	StreamCall(grpc.BidiStreamingServer[RPCRequest, RPCResponse]) error
	mustEmbedUnimplementedRPCServiceServer()
}

// UnimplementedRPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCServiceServer struct{}

func (UnimplementedRPCServiceServer) Call(context.Context, *RPCRequest) (*RPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedRPCServiceServer) StreamCall(grpc.BidiStreamingServer[RPCRequest, RPCResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCall not implemented")
}
func (UnimplementedRPCServiceServer) mustEmbedUnimplementedRPCServiceServer() {}
func (UnimplementedRPCServiceServer) testEmbeddedByValue()                    {}

// UnsafeRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServiceServer will
// result in compilation errors.
type UnsafeRPCServiceServer interface {
	mustEmbedUnimplementedRPCServiceServer()
}

func RegisterRPCServiceServer(s grpc.ServiceRegistrar, srv RPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedRPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCService_ServiceDesc, srv)
}

func _RPCService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCService_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).Call(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_StreamCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServiceServer).StreamCall(&grpc.GenericServerStream[RPCRequest, RPCResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RPCService_StreamCallServer = grpc.BidiStreamingServer[RPCRequest, RPCResponse]

// RPCService_ServiceDesc is the grpc.ServiceDesc for RPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_define.RPCService",
	HandlerType: (*RPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _RPCService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCall",
			Handler:       _RPCService_StreamCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto_define/rpc_service.proto",
}

const (
	PlayerService_UpdatePosition_FullMethodName = "/proto_define.PlayerService/UpdatePosition"
)

// PlayerServiceClient is the client API for PlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Player service for handling player-related operations
type PlayerServiceClient interface {
	// Update player position
	UpdatePosition(ctx context.Context, in *PlayerPositionRequest, opts ...grpc.CallOption) (*PlayerPositionResponse, error)
}

type playerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerServiceClient(cc grpc.ClientConnInterface) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) UpdatePosition(ctx context.Context, in *PlayerPositionRequest, opts ...grpc.CallOption) (*PlayerPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerPositionResponse)
	err := c.cc.Invoke(ctx, PlayerService_UpdatePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServiceServer is the server API for PlayerService service.
// All implementations must embed UnimplementedPlayerServiceServer
// for forward compatibility.
//
// Player service for handling player-related operations
type PlayerServiceServer interface {
	// Update player position
	UpdatePosition(context.Context, *PlayerPositionRequest) (*PlayerPositionResponse, error)
	mustEmbedUnimplementedPlayerServiceServer()
}

// UnimplementedPlayerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerServiceServer struct{}

func (UnimplementedPlayerServiceServer) UpdatePosition(context.Context, *PlayerPositionRequest) (*PlayerPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedPlayerServiceServer) mustEmbedUnimplementedPlayerServiceServer() {}
func (UnimplementedPlayerServiceServer) testEmbeddedByValue()                       {}

// UnsafePlayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServiceServer will
// result in compilation errors.
type UnsafePlayerServiceServer interface {
	mustEmbedUnimplementedPlayerServiceServer()
}

func RegisterPlayerServiceServer(s grpc.ServiceRegistrar, srv PlayerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlayerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlayerService_ServiceDesc, srv)
}

func _PlayerService_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_UpdatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).UpdatePosition(ctx, req.(*PlayerPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerService_ServiceDesc is the grpc.ServiceDesc for PlayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_define.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePosition",
			Handler:    _PlayerService_UpdatePosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_define/rpc_service.proto",
}

const (
	MessageService_SendChat_FullMethodName      = "/proto_define.MessageService/SendChat"
	MessageService_ReceiveEvents_FullMethodName = "/proto_define.MessageService/ReceiveEvents"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Message service for handling game messages
type MessageServiceClient interface {
	// Send a chat message
	SendChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	// Stream for receiving game events
	ReceiveEvents(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionSyncResponse], error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SendChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, MessageService_SendChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ReceiveEvents(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionSyncResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], MessageService_ReceiveEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HeartbeatRequest, PositionSyncResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_ReceiveEventsClient = grpc.ServerStreamingClient[PositionSyncResponse]

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility.
//
// Message service for handling game messages
type MessageServiceServer interface {
	// Send a chat message
	SendChat(context.Context, *ChatRequest) (*ChatResponse, error)
	// Stream for receiving game events
	ReceiveEvents(*HeartbeatRequest, grpc.ServerStreamingServer[PositionSyncResponse]) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageServiceServer struct{}

func (UnimplementedMessageServiceServer) SendChat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChat not implemented")
}
func (UnimplementedMessageServiceServer) ReceiveEvents(*HeartbeatRequest, grpc.ServerStreamingServer[PositionSyncResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveEvents not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}
func (UnimplementedMessageServiceServer) testEmbeddedByValue()                        {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_SendChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SendChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendChat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ReceiveEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HeartbeatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).ReceiveEvents(m, &grpc.GenericServerStream[HeartbeatRequest, PositionSyncResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageService_ReceiveEventsServer = grpc.ServerStreamingServer[PositionSyncResponse]

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_define.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendChat",
			Handler:    _MessageService_SendChat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveEvents",
			Handler:       _MessageService_ReceiveEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto_define/rpc_service.proto",
}
